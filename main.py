
import logging
import sqlite3
import asyncio
import sys
import os
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from openai import OpenAI
from crypto import create_invoice

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
ADMIN_ID = os.getenv("ADMIN_ID", "1082828397")
FREE_USES_LIMIT = 10

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
client = OpenAI(api_key=OPENAI_API_KEY)
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î ===
logging.basicConfig(level=logging.INFO)
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    usage_count INTEGER DEFAULT 0,
    subscribed INTEGER DEFAULT 0,
    subscription_expires TEXT,
    joined_at TEXT DEFAULT CURRENT_TIMESTAMP,
    notified_renewal INTEGER DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS history (
    user_id INTEGER,
    type TEXT,
    prompt TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

# === FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class GenStates(StatesGroup):
    await_text = State()
    await_image = State()

class StateAssistant(StatesGroup):
    dialog = State()

user_histories = {}

def is_subscribed(user_id):
    cursor.execute("SELECT subscribed FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row and row[0] == 1

def ensure_user(user_id):
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()

def get_usage_count(user_id):
    cursor.execute("SELECT usage_count FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

def get_stats():
    cursor.execute("SELECT COUNT(*), SUM(subscribed) FROM users")
    total, subs = cursor.fetchone()
    return f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\nüü¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subs or 0}"

def main_menu():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"), KeyboardButton(text="üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
        [KeyboardButton(text="üß† –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton(text="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")],
        [KeyboardButton(text="üìä –ê–¥–º–∏–Ω–∫–∞")],
    ], resize_keyboard=True)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    ensure_user(message.from_user.id)
    await message.answer("üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.message(F.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def menu_buy(message: Message):
    url = await create_invoice(message.from_user.id)
    btn = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å $1", url=url)]])
    await message.answer("üí≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=btn)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ

async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="buy", description="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
